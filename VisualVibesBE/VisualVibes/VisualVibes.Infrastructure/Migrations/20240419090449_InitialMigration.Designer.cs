// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VisualVibes.Infrastructure;

#nullable disable

namespace VisualVibes.Infrastructure.Migrations
{
    [DbContext(typeof(VisualVibesDbContext))]
    [Migration("20240419090449_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirstParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SecondParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FirstParticipantId");

                    b.HasIndex("SecondParticipantId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.Feed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Feeds");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Pictures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReactionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.FeedPost", b =>
                {
                    b.Property<Guid>("FeedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FeedId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("FeedPost");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.UserFollower", b =>
                {
                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FollowerId", "FollowingId");

                    b.HasIndex("FollowingId");

                    b.ToTable("UserFollower");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.Comment", b =>
                {
                    b.HasOne("VisualVibes.Domain.Models.BaseEntity.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisualVibes.Domain.Models.BaseEntity.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.Conversation", b =>
                {
                    b.HasOne("VisualVibes.Domain.Models.BaseEntity.User", "FirstParticipant")
                        .WithMany("StartedConversations")
                        .HasForeignKey("FirstParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VisualVibes.Domain.Models.BaseEntity.User", "SecondParticipant")
                        .WithMany("JoinedConversations")
                        .HasForeignKey("SecondParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FirstParticipant");

                    b.Navigation("SecondParticipant");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.Feed", b =>
                {
                    b.HasOne("VisualVibes.Domain.Models.BaseEntity.User", "User")
                        .WithOne("UserFeed")
                        .HasForeignKey("VisualVibes.Domain.Models.BaseEntity.Feed", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.Message", b =>
                {
                    b.HasOne("VisualVibes.Domain.Models.BaseEntity.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisualVibes.Domain.Models.BaseEntity.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.Post", b =>
                {
                    b.HasOne("VisualVibes.Domain.Models.BaseEntity.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.Reaction", b =>
                {
                    b.HasOne("VisualVibes.Domain.Models.BaseEntity.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisualVibes.Domain.Models.BaseEntity.User", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.UserProfile", b =>
                {
                    b.HasOne("VisualVibes.Domain.Models.BaseEntity.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("VisualVibes.Domain.Models.BaseEntity.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.FeedPost", b =>
                {
                    b.HasOne("VisualVibes.Domain.Models.BaseEntity.Feed", "Feed")
                        .WithMany("FeedPosts")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VisualVibes.Domain.Models.BaseEntity.Post", "Post")
                        .WithMany("FeedPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Feed");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.UserFollower", b =>
                {
                    b.HasOne("VisualVibes.Domain.Models.BaseEntity.User", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VisualVibes.Domain.Models.BaseEntity.User", "Following")
                        .WithMany("Followers")
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.Feed", b =>
                {
                    b.Navigation("FeedPosts");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FeedPosts");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("VisualVibes.Domain.Models.BaseEntity.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("JoinedConversations");

                    b.Navigation("Messages");

                    b.Navigation("Posts");

                    b.Navigation("Reactions");

                    b.Navigation("StartedConversations");

                    b.Navigation("UserFeed")
                        .IsRequired();

                    b.Navigation("UserProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
